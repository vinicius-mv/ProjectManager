@page "/tickets/{ticketId:int}"
@page "/projects/{projectId:int}/addticket"

@attribute [Authorize(Roles = "admin")]

@inject NavigationManager NavigationManager;
@inject ITicketScreenUseCases TicketScreenUseCases;

<h3>Ticket</h3>
<br />

<AlertComponent @ref="alertComponent"></AlertComponent>

@if (ticket != null)
{
    <EditForm Model="ticket" OnValidSubmit="Save">

        <DataAnnotationsValidator></DataAnnotationsValidator> @*Automatically triggers Annotations Validation*@
        <ValidationSummary></ValidationSummary>

        <div class="form-row mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText class="form-control" id="title" @bind-Value="ticket.Title"></InputText>
        </div>
        <div class="form-row mb-3">
            <label for="title" class="form-label">Description</label>
            <InputText class="form-control" id="description" @bind-Value="ticket.Description"></InputText>
        </div>
        <div class="form-row mb-3">
            <label for="owner" class="form-label">Owner</label>
            <InputText class="form-control" id="owner" @bind-Value="ticket.Owner" readonly></InputText>
        </div>
        <div class="form-row mb-3">
            <label for="report-date" class="form-label">Report Date</label>
            <InputDate class="form-control" id="report-date" @bind-Value="ticket.ReportDate"></InputDate>
        </div>
        <div class="form-row mb-3">
            <label for="due-date" class="form-label">Due Date</label>
            <InputDate class="form-control" id="due-date" @bind-Value="ticket.DueDate"></InputDate>
        </div>

        <div class="form-row mb-3">
            <button class="btn btn-outline-primary mr-2" type="submit">Save</button>
            <button class="btn btn-outline-danger" type="button" @onclick="Delete" style='display: @(isEditing ? "block" : "none")'>Delete</button>
        </div>

    </EditForm>
}

@code {
    private bool isEditing = false;

    private Ticket ticket { get; set; }

    private AlertComponent alertComponent;

    [Parameter]
    public int? TicketId { get; set; }

    [Parameter]
    public int? ProjectId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (TicketId.HasValue)
        {
            ticket = await TicketScreenUseCases.ViewTicketByIdAsync(TicketId.Value);
            isEditing = true;
        }

        if (ProjectId.HasValue && ticket == null)
            ticket = new Ticket() { ProjectId = this.ProjectId.Value };
    }

    private async Task Save()
    {
        bool isValid = true;

        if (!ticket.ValidateDescription())
        {
            alertComponent.ErrorMessage = "The Description is required";
            isValid = false;
        }

        if (!ticket.ValidateDueDatePresence())
        {
            alertComponent.ErrorMessage = "The Due Date is required";
            isValid = false;
        }

        if (!ticket.ValidateFutureDueDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be in the future";
            isValid = false;
        }

        if (!ticket.ValidateReportDatePresence())
        {
            alertComponent.ErrorMessage = "The Report Date is required";
            isValid = false;
        }

        if (!ticket.ValidateDueDateAfterReportDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be adfter Report Date";
            isValid = false;
        }

        if (!isValid)
        {
            alertComponent.Show();
            return;
        };

        if (TicketId.HasValue)
            await TicketScreenUseCases.UpdateTicketAsync(ticket);
        else
            await TicketScreenUseCases.AddTicketAsync(ticket);

        NavigationManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
    }

    private async void Delete()
    {
        if (!TicketId.HasValue)
            return;

        await TicketScreenUseCases.DeleteTicketAsync(TicketId.Value);

        NavigationManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
    }
}
