@page "/tickets/{ticketId:int}"

@inject NavigationManager NavigationManager;
@inject ITicketsScreenUseCases TicketsScreenUseCases;

<h3>Ticket</h3>
<br />

<AlertComponent @ref="alertComponent"></AlertComponent>

@if (ticket != null)
{
    <EditForm Model="ticket" OnValidSubmit="Save">

        <DataAnnotationsValidator></DataAnnotationsValidator> @*Automatically triggers Annotations Validation*@
        <ValidationSummary></ValidationSummary>

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText class="form-control" id="title" @bind-Value="ticket.Title"></InputText>
        </div>
        <div class="mb-3">
            <label for="title" class="form-label">Description</label>
            <InputText class="form-control" id="description" @bind-Value="ticket.Description"></InputText>
        </div>
        <div class="mb-3">
            <label for="owner" class="form-label">Owner</label>
            <InputText class="form-control" id="owner" @bind-Value="ticket.Owner" readonly></InputText>
        </div>
        <div class="mb-3">
            <label for="report-date" class="form-label">Report Date</label>
            <InputDate class="form-control" id="report-date" @bind-Value="ticket.ReportDate"></InputDate>
        </div>
        <div class="mb-3">
            <label for="due-date" class="form-label">Due Date</label>
            <InputDate class="form-control" id="due-date" @bind-Value="ticket.DueDate"></InputDate>
        </div>

        <button class="btn btn-primary" type="submit">Save</button>

    </EditForm>
}

@code {

    private Ticket ticket { get; set; }

    private AlertComponent alertComponent;

    [Parameter]
    public int TicketId { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        ticket = await TicketsScreenUseCases.ViewTicketById(TicketId);
    }

    private void Save()
    {
        bool isValid = true;

        if (!ticket.ValidateDescription())
        {
            alertComponent.ErrorMessage = "The Description is required";
            isValid = false;
        }

        if(!ticket.ValidateDueDatePresence())
        {
            alertComponent.ErrorMessage = "The Due Date is required";
            isValid = false;

        }

        if(!ticket.ValidateFutureDueDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be in the future";
            isValid = false;
        }


        if(!ticket.ValidateReportDatePresence())
        {
            alertComponent.ErrorMessage = "The Report Date is required";
            isValid = false;
        }

        if(!ticket.ValidateDueDateAfterReportDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be adfter Report Date";
            isValid = false;
        }

        if(!isValid)
        {
            alertComponent.Show();
            return;
        };

        TicketsScreenUseCases.UpdateTicket(ticket);
        NavigationManager.NavigateTo($"/projects/{ticket.ProjectId}/tickets");
    }
}
