@page "/projects/{projectId:int}/tickets"

@inject ITicketsScreenUseCases TicketScreenUseCases

<h3>Tickets</h3>
<br />

<div class="row">
    <div class="col-auto">
        @*<input type="text" class="form-control" @bind-value="searchFilter" @bind-value:event="oninput" /> *@
        <input type="text" class="form-control" @bind-value="searchFilter" />
    </div>
    <div class="col-auto">
        <button class="btn btn-light" @onclick="OnSearch">Search</button>
    </div>
    <div class="col-auto">
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="view-my-ticket" @bind-value="ViewMyTickets" />
            <label class="form-chekc-label" for="view-my-ticket">View My Tickets</label>
        </div>
    </div>
</div>
<br />

Project ID: @ProjectId

@if (tickets != null)
{
    <table class="table">
        <thead>
            <tr>
                <td>Title</td>
                <td>Owner</td>
                <td>Report Date</td>
                <td>Due Date</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in tickets)
            {
                <TicketRowComponent Ticket=ticket />
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Ticket> tickets;

    string searchFilter;

    private object ticketsLock = new object();

    bool viewMyTickets = false;
    public bool ViewMyTickets
    {
        get { return viewMyTickets; }
        set
        {
            viewMyTickets = value;
            Task.Run(async () =>
            {
                IEnumerable<Ticket> newTickets = Enumerable.Empty<Ticket>();
                if (viewMyTickets)
                    tickets = await TicketScreenUseCases.ViewOwnerTickets(ProjectId, "Frank");
                else
                    tickets = await TicketScreenUseCases.ViewTickets(ProjectId);

                StateHasChanged();
            });
        }
    }

    [Parameter]
    public int ProjectId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        tickets = await TicketScreenUseCases.ViewTickets(ProjectId);
    }

    private async Task OnSearch()
    {
        tickets = await TicketScreenUseCases.SearchTickets(searchFilter);
    }
}
